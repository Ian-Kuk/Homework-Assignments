# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lvSw3BYlMJPTKmYyIMbBZl7yb0PruCW3

By Ian Kuk, Kasra Shahrivar, Alex Itzenhuiser
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, roc_auc_score, classification_report, precision_score, recall_score, accuracy_score
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier

!wget https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv
!wget https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv

df = pd.read_csv('winequality-white.csv',sep=';')
df

def replace_values(x):
    if x >= 7:
        return 1
    else:
        return 0

df['quality'] = df['quality'].apply(replace_values)

import seaborn as sns
sns.heatmap(df.corr())

y = df['quality'].values
X = df.drop(['quality'], axis=1).to_numpy()

X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=1234)

rf = RandomForestClassifier()
params = {'n_estimators': [100, 500, 1000],
          'max_depth': [5, 10, 15],
          'min_samples_split': [2, 5, 10]}
grid_search = GridSearchCV(rf, params, cv=5)
grid_search.fit(X, y)

best_rf = grid_search.best_estimator_

y_pred = best_rf.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
cmd = ConfusionMatrixDisplay(cm)
cmd.plot()

pos_prec = precision_score(y_test, y_pred, pos_label=1)
neg_prec = precision_score(y_test, y_pred, pos_label=0)
pos_rec = recall_score(y_test, y_pred, pos_label=1)
neg_rec = recall_score(y_test, y_pred, pos_label=0)
print(f"Positive Precision: {pos_prec} Negative Precision: {neg_prec}")
print(f"Positive Recall: {pos_rec} Negative Recall: {neg_rec}")

df = pd.read_csv('winequality-red.csv',sep=';')
df

def replace_values(x):
    if x >= 7:
        return 1
    else:
        return 0

df['quality'] = df['quality'].apply(replace_values)

sns.heatmap(df.corr())

y = df['quality'].values
X = df.drop(['quality'], axis=1).to_numpy()

X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=1234)

rf = RandomForestClassifier()

params = {'n_estimators': [100, 500, 1000],
          'max_depth': [5, 10, 15],
          'min_samples_split': [2, 5, 10]}
grid_search = GridSearchCV(rf, params, cv=5)
grid_search.fit(X, y)

best_rf = grid_search.best_estimator_

y_pred = best_rf.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
cmd = ConfusionMatrixDisplay(cm)
cmd.plot()

pos_prec = precision_score(y_test, y_pred, pos_label=1)
neg_prec = precision_score(y_test, y_pred, pos_label=0)
pos_rec = recall_score(y_test, y_pred, pos_label=1)
neg_rec = recall_score(y_test, y_pred, pos_label=0)
print(f"Positive Precision: {pos_prec} Negative Precision: {neg_prec}")
print(f"Positive Recall: {pos_rec} Negative Recall: {neg_rec}")

